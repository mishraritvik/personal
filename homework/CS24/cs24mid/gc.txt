Part A.
A cons-pair can only reference memory cells that are older than it - those that
appear before it in the linked list (can be reached by tracing back on
prev_alloc any number of steps). This is because the cons pair must be made of
two already existing values, so the cons-pair must have been made after the
values were already made. This prevents the values in the cons-pair being freed
before the cons pair itself.


Part B.
There are two ways that something is reachable:
- It is a root, which we can check by is_root()
- It is a value in a cons-pair which is reachable, which we can check by marking
  the car and cdr of every reachable cons-pair that is encountered, and then
  check the marked status of everything as we come by it, and since all values
  in cons-pairs must be older than the cons-pair itself, this will work

void mark_and_sweep():
    # start with the newest
    cell = newest()

    while true:
        # end after oldest (assuming oldest().prev_alloc is NULL)
        if cell == NULL:
            break

        # check if root or already marked
        if cell.marked or is_root(cell):
            # check if it cons pair and mark car, cdr
            if is_cons(cell):
                set_marked(car(cell), 1)
                set_marked(cdr(cell), 1)

            # unmark for next iteration of garbage collection
            set_marked(cell, 0)

            # go to next in linked list
            cell = cell.prev_alloc
        else:
            # free if not marked or root
            prev = cell
            cell = cell.prev_alloc
            free(prev)


Part C.
Can it be interrupted and resumed:
Yes, this algorithm cannot be interrupted and then resumed. However, anything
created during the interruption that is then made unreachable will not be
garbage collected by resuming; garbage collection must be rerun.

Explanation:
The only case in which resuming will harm something is if somehow a cell that is
not reachable before the interruption is made reachable during the interruption,
and then gets freed when resumed. However, this cannot happen: if something is
unreachable before interruption, there is no way for it to be made reachable
again, as nothing in the program can reference it since it is unreachable. So,
an interruption followed by resuming cannot result in a value being freed when
it should not be.

Consequences:
Since cleaning is continued from the point at which it left off, as stated
before any values created during the interruption that are no longer reachable
will be left unfreed. However, the next round of garbage collection will be able
to free them.
