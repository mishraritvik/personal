Setting n = n & (n - 1) will result in exactly one 1 (if there exists at least
one 1 in the binary representation of n) being flipped to a 0. We can see this
if we consider a few numbers - take an odd n, and n & (n - 1) will flip the last
bit (which is a 1 since it is odd) to a 0, and leave the rest of the number
unchanged. If n is even, then the last non-zero bit will be flipped to 0, as
n - 1 will have a 0 in place of the last 1, and all 1's after, and since 0 & 1
is 0, all zero bits at the end will remain 0, and the last 1 will become a 0.
So, if we see how many times we can do this operation to n before it is 0, that
is the number of 1 bits in the binary representation.

It is faster because the number of required iterations is the number of 1's,
while the other technique always required the number of iterations to be the
number bits in the number. Since the number of 1's must be less than or equal to
the number of bits, the new technique is always at least as fast.
