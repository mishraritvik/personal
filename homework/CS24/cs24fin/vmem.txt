Part 1.

In the order in which they should be considered for eviction:

-Not Accessed and Not Dirty
These are the pages that have not been used at all since the last timer tick, so
they are the least used out of the four categories. Therefore, they should be
removed first.

-Accessed and Not Dirty
These are the pages that have only been read and not written since the last
timer tick. Since we associate a higher permission value with writing than we
do with reading, presumably we should associate a higher relevancy with
recently written files than recently read files as it seems that they are likely
being used in a higher capacity. So, pages that are only read and not written to
should be removed before any pages that have been written to.

-Accessed And Dirty
These are the pages that have been written to, and potentially read from as
well. As explained earlier, these should be removed only once all pages that
have not been written to are removed.

-Not Accessed and Dirty
These are the most recently created files, and so they are presumably the most
relevant. The only difference between this group and the previous one is that
these were definitely created since the last timer tick, and so they should be
removed only once all of those are removed.


Part 2.A.

The result of this mechanism is that the history value will hold the access
history over the last k timer ticks, so that the page eviction policy can take
into consideration accesses that were recent, but not so recent that they
occured in the last timer tick.

I think the best mechanism would be a weighted sum over the bits of the history
value, where the least significant bit (the least recent one) has the lowest
weight, and the most significant bit (the most recent one) has the highest
weight. Then, the page with the smallest sum is evicted. The optimal weights
can be determined experimentally, or all the weights can be set to 1 if it is
determined that an access k timer ticks ago implies as high a relevancy as an
access since the last timer tick.

Part 2.B.

#define ACCESS_MASK  0x04   /* Keeps bit 5, the access bit. */
#define ACCESS_BIT   5      /* The location of the access bit. */

void update_history(pte_t pte, unsigned int *p_history) {
    /* Right shift current history value. */
    *(p_history) >> 1;

    /* Add current accessed bit to the top bit (which is currently zero). */
    *(p_history) += (pte & ACCESS_MASK) << ACCESS_BIT;
}

Part 2.C.

When k = 1, this policy and LRU are identical: they are both only keeping track
of accesses since the last timer tick, and choosing the evict a page with that
has a history value of 0. As k increases, this policy keeps track of more of the
access history, and decisions can be made with more information: it is possible
that there is a page that was not accessed since the last timer tick, but was
accessed in each of the k - 1 periods before; it is also possible for there to
be a page that was accessed since the last timer tick, but was not accessed in
the previous k - 1 periods before. This policy would realize that the first page
is clearly more relevant than the second, and choose to evict the second one
first. LRU, on the other hand, is oblivious to older accesses and would choose
to evict the first page.
