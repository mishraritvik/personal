Part 1. Puzzle 1.

Part 1.A. Number of Prints

Answer: 10
At the very beginning of the loop, it forks. So, there are two processes that
are at the i = 0 iteration of the loop. They each increment counter and print.
So, we have two times printed so far. Then they both go into the i = 1
iteration. They first fork, so there are another two processes at the i = 1
iteration, making for a total of 4. All four print, so the total is 4 + 2 = 6
prints so far. Now, all four processes are at i = 2, so they do not enter the
body of the for loop. They all print after the for loop has finished, so
another four prints making the total 4 + 6 = 10 prints. The value of counter is
printed 10 times. Two of these will be when counter is 1 (the first prints by
the original process and its first fork), while the other 8 will be when the
counter is 2 (four times in the loop, four times after the loop finishes).

Part 1.B. First Value

Answer: 1
When fork is called for the first time, counter = 0. Then, counter is
incremented and printed, with nothing else happening at the same time. So, the
first line will have counter as 1.

Part 1.C. Last Value

Answer: 2
Every process that is forked will eventually go from the first iteration of the
loop to the second, and due to the bounds of the loop it is not possible for
counter to go over 2. So, there is no way for counter = 1 to be the last line,
as at least one counter = 2 line will always follow at some point. So, the last
line will ahve counter as 2.


Part 2. Puzzle 2.

Answer: The output will always be the same.

First, it makes handler1 a signal handler for SIGUSR1. Then it forks, and the
child makes handler2 a signal handler for SIGUSR1 as well, and the parent waits
for child to terminate then adds 2 to counter and prints. The child kills the
process and signals SIGUSR1, causing handler1 and handler2 to be called.

So, the order of events:

The child kills the parent and signals SIGUSR1. This results in handler1 being
called, which increments counter and prints its value. So, "counter = 1" will be
printed.

Then, the parent kills itself and signals SIGUSR1, resulting in handler2 being
called in the child process. handler2 adds 3 to counter to make it 3, and then
prints it. So, "counter = 3" will then be printed.

Meanwhile, the parent process was waiting for the child process to terminate.
So, when handler1 kills the child it will be able to proceed. It adds 2 to
counter to make it 3, then prints it. So, "counter = 3" will then be printed.

The output will always be:
counter = 1
counter = 3
counter = 3


Part 3. Puzzle 3.

Answer: 01342, 03142, and 03412 are possible.

First, 0 will always be printed. This matches up with all of the supplied
outputs, so this does not tell us anything.

Then, it forks. The child increments val to 3 and prints, and the parent
decrements val to 1 and prints. Then they both increment (child to 4, parent to
2) and print. Since the child and parent and executed concurrently, it is
possible for the parent and child to execute it various orders.

The constraints:
- child prints 3 then 4, so 3 must always come before 4.
- parent prints 1 then 2, so 1 must always come before 2.
- parent waits after printing 1, so child must finish before the parent prints
  2. this means 3 and 4 will come before 2.

The possibilities that follow these constraints:
01342
03142
03412
